---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-audit-action
name: 'üêç Python Dependency Audit'
# yamllint disable-line rule:line-length
description: 'Check a Python project dependencies for known security vulnerabilities'

inputs:
  # Mandatory
  python_version:
    description: 'Python version used to perform audit'
    required: true
  # Optional
  never_fail:
    description: 'Continue even when an audit fails'
    required: false
    default: false
  artefact_path:
    description: 'Path/location to build artefacts'
    type: string
    required: false
    default: 'dist'
  summary:
    description: 'Whether to generate summary output'
    type: boolean
    required: false
    default: true
  path_prefix:
    description: 'Directory location containing project code'
    type: string
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Extract Python project naming/metadata'
      id: naming
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/python-project-name-action@8711a5e8206beb42a73f95460972e2ea80b5f946 # v0.1.3
      with:
        path_prefix: "${{ inputs.path_prefix }}"

    - name: '‚¨á Download build artefacts'
      # yamllint disable-line rule:line-length
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
      with:
        name: "${{ env.python_project_name }}"
        path: "${{ inputs.artefact_path }}"

    - name: "Setup Python ${{ inputs.python_version }}"
      # yamllint disable-line rule:line-length
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: "${{ inputs.python_version }}"

    - name: 'Install build products/dependencies'
      shell: bash
      run: |
        # Install build products/dependencies
        echo 'Upgrading: pip, setuptools'
        python -m pip install --disable-pip-version-check \
          -q --upgrade pip setuptools
        echo 'Installing built package(s) and dependencies'
        for wheel in ${{ inputs.artefact_path }}/*.whl; do
                pip install -q "$wheel"
        done
        if [ -f 'requirements.txt' ]; then
          echo 'Installing dependencies from: requirements.txt'
          pip install -q -r requirements.txt
        fi

    - name: 'Auditing with: pypa/gh-action-pip-audit'
      if: ${{ inputs.never_fail == 'false' }}
      # yamllint disable-line rule:line-length
      uses: pypa/gh-action-pip-audit@1220774d901786e6f652ae159f7b6bc8fea6d266 # v1.1.0
      with:
        inputs: "${{ inputs.path_prefix }}"
        summary: "${{ inputs.summary }}"

    - name: 'Auditing with: pypa/gh-action-pip-audit'
      if: ${{ inputs.never_fail == 'true' }}
      continue-on-error: true
      # yamllint disable-line rule:line-length
      uses: pypa/gh-action-pip-audit@1220774d901786e6f652ae159f7b6bc8fea6d266 # v1.1.0
      with:
        inputs: "${{ inputs.path_prefix }}"
        summary: "${{ inputs.summary }}"
